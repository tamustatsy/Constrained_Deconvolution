library(rmutil)
?rlaplace
n.ind <- 1000
res <- NULL
for(seed in (1000 + c(1:100)*100)){
filename <- paste("seed", seed, "_HET", sep = "")
res_sub <- read.table(paste("./result/", n.ind, "/", filename, ".csv", sep = ""), row.names = NULL, sep = ",", header = TRUE,
col.names = c("seed", "imae_CB", "imse_CB", "wass_CB", "excprob_CB", "imae_Ker",
"imse_Ker", "wass_Ker", "excprob_Ker", "x.grid", "density.CB", "xx.Ker", "density.Ker"))
res <- rbind(res, res_sub)
}
dim(res)
res_mat <- as.matrix(res)
res_mat <- matrix(as.numeric(res_mat), ncol = 13)
res_1 <- res_mat[,2:9]
#---------compute mean and sd---------
mean <- apply(res_1, 2, mean)
mean
sd <- apply(res_1, 2, sd)
sd
n.ind <- 5000
res <- NULL
for(seed in (1000 + c(1:100)*100)){
filename <- paste("seed", seed, "_HET", sep = "")
res_sub <- read.table(paste("./result/", n.ind, "/", filename, ".csv", sep = ""), row.names = NULL, sep = ",", header = TRUE,
col.names = c("seed", "imae_CB", "imse_CB", "wass_CB", "excprob_CB", "imae_Ker",
"imse_Ker", "wass_Ker", "excprob_Ker", "x.grid", "density.CB", "xx.Ker", "density.Ker"))
res <- rbind(res, res_sub)
}
dim(res)
res_mat <- as.matrix(res)
res_mat <- matrix(as.numeric(res_mat), ncol = 13)
res_1 <- res_mat[,2:9]
#---------compute mean and sd---------
mean <- apply(res_1, 2, mean)
mean
n.ind <- 1000
res <- NULL
for(seed in (1000 + c(1:100)*100)){
filename <- paste("seed", seed, "_HET", sep = "")
res_sub <- read.table(paste("./result/", n.ind, "/", filename, ".csv", sep = ""), row.names = NULL, sep = ",", header = TRUE,
col.names = c("seed", "imae_CB", "imse_CB", "wass_CB", "excprob_CB", "imae_Ker",
"imse_Ker", "wass_Ker", "excprob_Ker", "x.grid", "density.CB", "xx.Ker", "density.Ker"))
res <- rbind(res, res_sub)
}
dim(res)
res_mat <- as.matrix(res)
res_mat <- matrix(as.numeric(res_mat), ncol = 13)
res_1 <- res_mat[,2:9]
#---------compute mean and sd---------
mean <- apply(res_1, 2, mean)
mean
sd <- apply(res_1, 2, sd)
sd
n.ind <- 5000
res <- NULL
for(seed in (1000 + c(1:100)*100)){
filename <- paste("seed", seed, "_HET", sep = "")
res_sub <- read.table(paste("./result/", n.ind, "/", filename, ".csv", sep = ""), row.names = NULL, sep = ",", header = TRUE,
col.names = c("seed", "imae_CB", "imse_CB", "wass_CB", "excprob_CB", "imae_Ker",
"imse_Ker", "wass_Ker", "excprob_Ker", "x.grid", "density.CB", "xx.Ker", "density.Ker"))
res <- rbind(res, res_sub)
}
dim(res)
res_mat <- as.matrix(res)
res_mat <- matrix(as.numeric(res_mat), ncol = 13)
res_1 <- res_mat[,2:9]
#---------compute mean and sd---------
mean <- apply(res_1, 2, mean)
mean
sd <- apply(res_1, 2, sd)
sd
n.ind <- 5000
res <- NULL
for(seed in (1000 + c(1:100)*100)){
filename <- paste("seed", seed, "_HET", sep = "")
res_sub <- read.table(paste("./result/", n.ind, "/", filename, ".csv", sep = ""), row.names = NULL, sep = ",", header = TRUE,
col.names = c("seed", "imae_CB", "imse_CB", "wass_CB", "excprob_CB", "imae_Ker",
"imse_Ker", "wass_Ker", "excprob_Ker", "x.grid", "density.CB", "xx.Ker", "density.Ker"))
res <- rbind(res, res_sub)
}
dim(res)
res_mat <- as.matrix(res)
res_mat <- matrix(as.numeric(res_mat), ncol = 13)
res_1 <- res_mat[,2:9]
#---------compute mean and sd---------
mean <- apply(res_1, 2, mean)
mean
plaplace(c(1,2,3),location=0,scale=c(1,2,3))
library(VGAM)
plaplace(c(1,2,3),location=0,scale=c(1,2,3))
plaplace(c(1,2,3),location=0,scale=c(1,2,1))
plaplace(c(1,3),location=0,scale=1)
plaplace(2,location=0,scale=2)
plaplace(c(1,3,3),location=0,scale=c(1,2,4))
plaplace(3,location=0,scale=2)
plaplace(3,location=0,scale=4)
n.ind <- 1000
res <- NULL
for(seed in (1000 + c(1:100)*100)){
filename <- paste("seed", seed, "_HET", sep = "")
res_sub <- read.table(paste("./result/", n.ind, "/", filename, ".csv", sep = ""), row.names = NULL, sep = ",", header = TRUE,
col.names = c("seed", "imae_CB", "imse_CB", "wass_CB", "excprob_CB", "imae_Ker",
"imse_Ker", "wass_Ker", "excprob_Ker", "x.grid", "density.CB", "xx.Ker", "density.Ker"))
res <- rbind(res, res_sub)
}
dim(res)
res_mat <- as.matrix(res)
res_mat <- matrix(as.numeric(res_mat), ncol = 13)
res_1 <- res_mat[,2:9]
#---------compute mean and sd---------
mean <- apply(res_1, 2, mean)
mean
sd <- apply(res_1, 2, sd)
sd
n.ind <- 5000
res <- NULL
for(seed in (1000 + c(1:100)*100)){
filename <- paste("seed", seed, "_HET", sep = "")
res_sub <- read.table(paste("./result/", n.ind, "/", filename, ".csv", sep = ""), row.names = NULL, sep = ",", header = TRUE,
col.names = c("seed", "imae_CB", "imse_CB", "wass_CB", "excprob_CB", "imae_Ker",
"imse_Ker", "wass_Ker", "excprob_Ker", "x.grid", "density.CB", "xx.Ker", "density.Ker"))
res <- rbind(res, res_sub)
}
dim(res)
res_mat <- as.matrix(res)
res_mat <- matrix(as.numeric(res_mat), ncol = 13)
res_1 <- res_mat[,2:9]
#---------compute mean and sd---------
mean <- apply(res_1, 2, mean)
mean
sd <- apply(res_1, 2, sd)
sd
lfg <- 200
df.t <- 5
q.zero <- 0.8
sd.zero <- 0.2
x.grid <- res_mat[1:lfg, 10]
xx <- res_mat[1:(2*lfg), 12]
density.x.mat <- matrix(res_mat[, 11], nrow = lfg)
y2.mat <- matrix(res_mat[, 13], nrow = 2*lfg)
density.x.mean <- apply(density.x.mat, 1, mean)
y2.mean <- apply(y2.mat, 1, mean)
x.grid.plot = c(rev(-x.grid), x.grid[-1])                     #extend the grid to include the negative half
density.x.mean <- c(rev(density.x.mean), density.x.mean[-1])
pdf(paste("./result/plots/", n.ind, "_sd_zero_0dot2_cut_gamma_2dot5_HET_laplaceError.pdf", sep = ""))
max_den <- max(q.zero*dnorm(x.grid, mean = 0, sd = sd.zero) + (1-q.zero)*dt(x.grid, df = df.t), density.x.mean)
plot(x.grid.plot, density.x.mean, xlim = c(-3,3),ylim = c(0, max_den), type = "l", lty = 2, lwd = 3, col = "red", ylab="", xlab="x", main = "est vs true")
lines(x.grid.plot, q.zero*dnorm(x.grid.plot, mean = 0, sd = sd.zero)+(1 - q.zero)*dt(x.grid.plot, df = df.t), col = "blue", lwd = 3)
lines(xx,y2.mean,col="black", lty = 4, lwd = 3)
#lines(xx,y.mean,col='black', lty = 4, lwd = 3)
#legend(x="topright",legend=c( "Truth","Constrained Bayes","Kernel", "Rescaled Kernel"), col=c("blue","red","black","black"), lty=c(1,2,4,5), lwd = c(3,3,3,3), cex=0.9)
legend(x="topright",legend=c("Truth","Constrained Bayes","Kernel"), col=c("blue", "red", "black"),
lty=c(1,2,4), lwd = c(3,3,3), cex=1.1)
dev.off()
